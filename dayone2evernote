#!/usr/bin/env python

import os
import sys
import argparse
import glob
import plistlib
import datetime
import pytz

def info(msg):
    print msg

def info_line():
    info('--------------------------------------------------------------------------')

def execute(cmd):
    info(cmd)
    ret = os.system(cmd)
    if ret != 0:
        info_line()
        info('Failed [%s]: %s' % (ret, cmd))
        sys.exit(ret)

def check_args(args):
    if not args.day_one_entries_path:
        info('Need to provide the path of Day One\'s entries')
        sys.exit(2)
    if not args.test and not args.evernote_note_book:
        info('Need to provide the notebook name that you want to export')
        sys.exit(2)
    if not args.all and (not args.year or not args.month or not args.day):
        info('Need to provide the year, month, and day that you want to export')
        sys.exit(2)

def get_entry_date(creation_date, time_zone):
    tz = pytz.timezone(time_zone)
    result = pytz.utc.localize(creation_date).astimezone(tz)
    #info('%s, %s -> %s, %d, %d' % (creation_date, time_zone, result, result.hour, result.minute))
    return result

def process_entries(entries, entries_path, date_only=None):
    for f in glob.glob(os.path.join(entries_path, '*.doentry')):
        pl = plistlib.readPlist(f)
        t = get_entry_date(pl['Creation Date'], pl['Time Zone'])
        d = '%4d-%02d-%02d' % (t.year, t.month, t.day)
        if date_only is not None:
            if d != date_only:
                continue
        day_entries = entries.get(d)
        if day_entries is None:
            day_entries = {} 
            entries[d] = day_entries
        day_entries[t] = pl['Entry Text']

def convert(entries):
    note = ''
    times = entries.keys()
    times.sort()
    for t in times:
        if note:
            note = note + '\n\n\n';
        note = note + '[%02d:%02d]\n' % (t.hour, t.minute)
        note = note + entries[t]
    return note

def export_all(entries, entries_path):
    process_entries(entries, entries_path)

def export_one(entries, entries_path, year, month, day):
    d = '%4d-%02d-%02d' % (int(year), int(month), int(day))
    process_entries(entries, entries_path, date_only=d)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--day_one_entries_path')
    parser.add_argument('-b', '--evernote_note_book')

    parser.add_argument('-y', '--year')
    parser.add_argument('-m', '--month')
    parser.add_argument('-d', '--day')

    parser.add_argument('-a', '--all', action='store_true', help='export ALL entries')

    parser.add_argument('-t', '--test', action='store_true', help='Test only (don not create note in evernote)')

    args = parser.parse_args()

    check_args(args)

    day_one_entries = {}
    if args.all:
        export_all(day_one_entries, args.day_one_entries_path)
    else:
        export_one(day_one_entries, args.day_one_entries_path, args.year, args.month, args.day)

    evernote_notes = {}
    for day in day_one_entries:
        evernote_notes[day] = convert(day_one_entries[day])

    if args.test:
        for d in evernote_notes:
            info_line()
            info(d)
            info_line()
            info(evernote_notes[d])
    else:
        save_evernote_notes(evernote_notes, args.evernote_note_book)

if __name__ == '__main__':
    main()

