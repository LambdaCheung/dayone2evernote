#!/usr/bin/env python

import os
import sys
import argparse
import glob
import plistlib
import datetime
import pytz

def info(msg):
    print msg

def info_line():
    info('--------------------------------------------------------------------------')

def execute(cmd):
    info(cmd)
    ret = os.system(cmd)
    if ret != 0:
        info_line()
        info('Failed [%s]: %s' % (ret, cmd))
        sys.exit(ret)

def check_args(args):
    if not args.day_one_entries_path:
        info('Need to provide the path of Day One\'s entries')
        sys.exit(2)
    if args.save and not args.evernote_note_book:
        info('Need to provide the notebook name that you want to export')
        sys.exit(2)
    if not args.all and not args.new and (not args.year or not args.month or not args.day):
        info('Need to provide the year, month, and day that you want to export')
        sys.exit(2)

def get_entry_date(creation_date, time_zone):
    tz = pytz.timezone(time_zone)
    result = pytz.utc.localize(creation_date).astimezone(tz)
    #info('%s, %s -> %s, %d, %d' % (creation_date, time_zone, result, result.hour, result.minute))
    return result

def process_entries(entries, entries_path, filter_func):
    for f in glob.glob(os.path.join(entries_path, '*.doentry')):
        pl = plistlib.readPlist(f)
        if not hasattr(pl, 'Creation Date'):
            info('Invalid Entry: "Creation Date" Not Found: %s' % f)
            continue
        if not hasattr(pl, 'Time Zone'):
            info('Invalid Entry: "Time Zone" Not Found: %s' % f)
            continue
        if not hasattr(pl, 'Entry Text'):
            info('Invalid Entry: "Entry Text" Not Found: %s' % f)
            continue

        t = get_entry_date(pl['Creation Date'], pl['Time Zone'])
        if not filter_func(t):
            continue
        d = '%04d-%02d-%02d' % (t.year, t.month, t.day)
        info('Process Entry: %s, %s' % (t, d))
        day_entries = entries.get(d)
        if day_entries is None:
            day_entries = {} 
            entries[d] = day_entries
        day_entries[t] = pl['Entry Text']

def convert(entries):
    note = ''
    times = entries.keys()
    times.sort()
    for t in times:
        if note:
            note = note + '\n\n\n';
        note = note + '[%02d:%02d]\n' % (t.hour, t.minute)
        note = note + entries[t]
    return note

def export_all(entries, entries_path):
    def all_filter(t):
        return True
    process_entries(entries, entries_path, all_filter)

def earlier_date(y1, m1, d1, y2, m2, d2, allow_same_day):
    if y1 < y2:
        return True
    elif y1 > y2:
        return False
    if m1 < m2:
        return True
    elif m1 > m2:
        return False
    if d1 < d2:
        return True
    elif d1 > d2:
        return False
    return allow_same_day

def export_new(entries, entries_path):
    now = datetime.datetime.now()
    path = os.path.dirname(__file__) #not using realpath here, since want to keep the last file with symlink
    f = open(path + '/dayone2evernote.last')
    datestr = f.readline()
    f.close()
    year = int(datestr.split('-')[0])
    month = int(datestr.split('-')[1])
    day = int(datestr.split('-')[2])
    info('Last processed date is: %s' % datestr)

    def new_filter(t):
        return earlier_date(year, month, day, t.year, t.month, t.day, True) and \
               earlier_date(t.year, t.month, t.day, now.year, now.month, now.day, False)

    process_entries(entries, entries_path, new_filter)
    return '%04d-%02d-%02d' % (now.year, now.month, now.day)

def export_one(entries, entries_path, year, month, day):
    datestr = '%04d-%02d-%02d' % (int(year), int(month), int(day))
    def one_filter(t):
        d = '%04d-%02d-%02d' % (t.year, t.month, t.day)
        return d == datestr
    process_entries(entries, entries_path, one_filter) 

def save_last_date(datestr):
    path = os.path.dirname(__file__) #not using realpath here, since want to keep the last file with symlink
    f = open(path + '/dayone2evernote.last', 'w')
    f.write(datestr + '\n')
    f.close()
    info('Save last processed date as: %s' % datestr)

def save_evernote_note(notebook, datestr, title, text):
    text = text.encode('utf8')
    text = text.replace('"', "'")
    text = text.replace('$', '\\$')
    text = text.replace('`', '\\`')
    path = os.path.dirname(os.path.realpath(__file__))
    cmd = '%s/save-note.applescript "%s" "%s" "%s" "%s"' % (path, notebook, datestr, title, text)
    info('Saving %s -> %s' % (datestr, notebook))
    return_code = os.system(cmd)
    if return_code != 0:
        info_line()
        info(cmd)

def save_evernote_notes(notes, notebook):
    for datestr in notes:
        save_evernote_note(notebook, datestr, datestr, notes[datestr])

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--day_one_entries_path')
    parser.add_argument('-b', '--evernote_note_book')

    parser.add_argument('-y', '--year')
    parser.add_argument('-m', '--month')
    parser.add_argument('-d', '--day')

    parser.add_argument('-a', '--all', action='store_true', help='export ALL entries')
    parser.add_argument('-n', '--new', action='store_true', help='export NEW entries')

    parser.add_argument('-s', '--save', action='store_true', help='Save to Evernote')

    args = parser.parse_args()

    check_args(args)

    day_one_entries = {}
    nowstr = ''
    if args.all:
        export_all(day_one_entries, args.day_one_entries_path)
    elif args.new:
        nowstr = export_new(day_one_entries, args.day_one_entries_path)
    else:
        export_one(day_one_entries, args.day_one_entries_path, args.year, args.month, args.day)

    evernote_notes = {}
    for day in day_one_entries:
        evernote_notes[day] = convert(day_one_entries[day])

    if args.save:
        save_evernote_notes(evernote_notes, args.evernote_note_book)
        if args.new:
            save_last_date(nowstr)
    else:
        for d in evernote_notes:
            info('==========================================================================')
            info(d)
            info_line()
            info(evernote_notes[d])

if __name__ == '__main__':
    main()

